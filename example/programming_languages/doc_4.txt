Scala (/ˈskɑːlɑː/ SKAH-lah)[9] is a general-purpose programming language providing support for functional programming and a strong static type system. Designed to be concise,[10] many of Scala's design decisions aimed to address criticisms of Java.[8]

Scala source code is intended to be compiled to Java bytecode, so that the resulting executable code runs on a Java virtual machine. Scala provides language interoperability with Java, so that libraries written in both languages may be referenced directly in Scala or Java code.[11] Like Java, Scala is object-oriented, and uses a curly-brace syntax reminiscent of the C programming language. Unlike Java, Scala has many features of functional programming languages like Scheme, Standard ML and Haskell, including currying, type inference, immutability, lazy evaluation, and pattern matching. It also has an advanced type system supporting algebraic data types, covariance and contravariance, higher-order types (but not higher-rank types), and anonymous types. Other features of Scala not present in Java include operator overloading, optional parameters, named parameters, and raw strings. Conversely, a feature of Java not in Scala is checked exceptions, which have proved controversial.

The name Scala is a portmanteau of scalable and language, signifying that it is designed to grow with the demands of its users.[12]

Contents
1	History
2	Platforms and license
2.1	Other compilers and targets
3	Examples
3.1	"Hello World" example
3.2	Basic example
3.3	Example with classes
4	Features (with reference to Java)
4.1	Syntactic flexibility
4.2	Unified type system
4.3	For-expressions
4.4	Functional tendencies
4.4.1	Everything is an expression
4.4.2	Type inference
4.4.3	Anonymous functions
4.4.4	Immutability
4.4.5	Lazy (non-strict) evaluation
4.4.6	Tail recursion
4.4.7	Case classes and pattern matching
4.4.8	Partial functions
4.5	Object-oriented extensions
4.6	Expressive type system
4.7	Type enrichment
5	Concurrency
6	Cluster computing
7	Testing
8	Versions
9	Comparison with other JVM languages
10	Adoption
10.1	Language rankings
10.2	Companies
11	Criticism
12	See also
13	References
14	Further reading
15	External links
History
The design of Scala started in 2001 at the École Polytechnique Fédérale de Lausanne (EPFL) (in Lausanne, Switzerland) by Martin Odersky. It followed on from work on Funnel, a programming language combining ideas from functional programming and Petri nets.[13] Odersky formerly worked on Generic Java, and javac, Sun's Java compiler.[13]

After an internal release in late 2003, Scala was released publicly in early 2004 on the Java platform,[14][8][13][15] A second version (v2.0) followed in March 2006.[8]

Although Scala had extensive support for functional programming from its inception, Java remained a mostly object-oriented language until the inclusion of lambda expressions with Java 8 in 2014.

On 17 January 2011, the Scala team won a five-year research grant of over €2.3 million from the European Research Council.[16] On 12 May 2011, Odersky and collaborators launched Typesafe Inc. (later renamed Lightbend Inc.), a company to provide commercial support, training, and services for Scala. Typesafe received a $3 million investment in 2011 from Greylock Partners.[17][18][19][20]

Platforms and license
Scala runs on the Java platform (Java virtual machine) and is compatible with existing Java programs.[14] As Android applications are typically written in Java and translated from Java bytecode into Dalvik bytecode (which may be further translated to native machine code during installation) when packaged, Scala's Java compatibility makes it well-suited to Android development, more so when a functional approach is preferred.[21]

The reference Scala software distribution, including compiler and libraries, is released under a BSD license.[22]

Other compilers and targets
Scala.js is a Scala compiler that compiles to JavaScript, making it possible to write Scala programs that can run in web browsers.[23]

Scala Native is a Scala compiler that targets the LLVM compiler infrastructure to create executable code that uses a lightweight managed runtime, which uses the Boehm garbage collector. The project is led by Denys Shabalin and had its first release, 0.1, on 14 March 2017. Development of Scala Native began in 2015 with a goal of being faster than just-in-time compilation for the JVM by eliminating the initial runtime compilation of code and also providing the ability to call native routines directly.[24][25]

A reference Scala compiler targeting the .NET Framework and its Common Language Runtime was released in June 2004,[13] but was officially dropped in 2012.[26]

Examples
"Hello World" example
The Hello World program written in Scala has this form:

 object HelloWorld extends App {
   println("Hello, World!")
 }
Unlike the stand-alone Hello World application for Java, there is no class declaration and nothing is declared to be static; a singleton object created with the object keyword is used instead.

When the program is stored in file HelloWorld.scala, the user compiles it with the command:

$ scalac HelloWorld.scala
and runs it with

$ scala HelloWorld
This is analogous to the process for compiling and running Java code. Indeed, Scala's compiling and executing model is identical to that of Java, making it compatible with Java build tools such as Apache Ant.

A shorter version of the "Hello World" Scala program is:

println("Hello, World!")
Scala includes interactive shell and scripting support.[27] Saved in a file named HelloWorld2.scala, this can be run as a script with no prior compiling using:

$ scala HelloWorld2.scala
Commands can also be entered directly into the Scala interpreter, using the option -e:

$ scala -e 'println("Hello, World!")'
Expressions can be entered interactively in the REPL:

$ scala
Welcome to Scala 2.12.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_131).
Type in expressions for evaluation. Or try :help.

scala> List(1, 2, 3).map(x => x * x)
res0: List[Int] = List(1, 4, 9)

scala>
Basic example
The following example shows the differences between Java and Scala syntax: